"""
/***************************************************************************
 TaulaResum
                                 A QGIS plugin
 TaulaResum
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-13
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Josep Lopez Xarbau / CCU
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .TaulaResum_dialog import TaulaResumDialog
import os.path
"""
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtSql import *
from PyQt5.QtWidgets import QAction,QMessageBox,QTableWidgetItem, QApplication, QFileDialog,QToolBar

#from qgis.core import QgsDataSourceURI
from qgis.utils import iface
import psycopg2
from decimal import *
import unicodedata
import datetime

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .TaulaResum_dialog import TaulaResumDialog
import os.path

"""
Variables globals per a la connexio
"""
nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
micolor=None
Versio_modul="V_Q3.240904"

versio_db=None
Fitxer=""

'''
Classe principal 'Taula Resum'
'''
class TaulaResum:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        '''
        Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        '''
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TaulaResum_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        '''
        Connexio dels botons amb les funcions que han de realitzar
        '''
        self.dlg = TaulaResumDialog()
        self.dlg.btoSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.btoHome.toggled.connect(self.on_click_MarcarBotoHome)
        self.dlg.btoDona.toggled.connect(self.on_click_MarcarBotoDona)
        self.dlg.btoEDAT.toggled.connect(self.on_click_MarcarBotoEDAT)
        self.dlg.btoGENERE.toggled.connect(self.on_click_MarcarBotoGENERE)
        self.dlg.btoESTUDIS.toggled.connect(self.on_click_MarcarBotoESTUDIS)
        self.dlg.btoORIGEN.toggled.connect(self.on_click_MarcarBotoORIGEN)
        self.dlg.btoNACIONALITAT.toggled.connect(self.on_click_MarcarBotoNACIONALITAT)
        self.dlg.comboConnexions.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.btoData.toggled.connect(self.on_click_btoData)
        self.dlg.btoPais.toggled.connect(self.on_click_btoPais)
        self.dlg.btoPais_3.toggled.connect(self.on_click_btoPais2)
        self.dlg.btoZones.toggled.connect(self.on_click_btoZones)
        self.dlg.btoZones_3.toggled.connect(self.on_click_btoZones2)
        self.dlg.btoCrearTaula.clicked.connect(self.on_click_crearTaula)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&CCU')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar('CCU')
        #self.toolbar.setObjectName('TaulaResum')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TaulaResum', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def on_click_btoPais(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaPais.setEnabled(True)
        else:
            self.dlg.LlistaPais.setEnabled(False)
            
    def on_click_btoPais2(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaPais2.setEnabled(True)
        else:
            self.dlg.LlistaPais2.setEnabled(False)
            
    def on_click_btoZones(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaZonesCont.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont.setEnabled(False)
            
    def on_click_btoZones2(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaZonesCont2.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont2.setEnabled(False)
                  
    
    def on_click_Sortir(self):
        '''/
        Tanca la finestra del plugin 
        '''
        self.EstatInicial()
        self.dlg.close()
        
    def on_click_MarcarBotoHome(self, clicked):
        '''
        Activa o desactiva el boto Home
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoHome.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoDona.setChecked(False)
        else:
            self.dlg.btoHome.setChecked(False)
            self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoDona(self, clicked):
        '''
        Activa o desactiva el boto Dona
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoDona.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoHome.setChecked(False)
        else:
            self.dlg.btoDona.setChecked(False)
            self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoEDAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Edat.
        '''
        if clicked:
            self.dlg.btoEDAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(0)
        else:
            self.dlg.btoEDAT.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoGENERE(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Genere.
        '''
        if clicked:
            self.dlg.btoGENERE.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(1)
        else:
            self.dlg.btoGENERE.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoESTUDIS(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Estudis.
        '''
        if clicked:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(2)
        else:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoORIGEN(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Origen.
        '''
        if clicked:
            self.dlg.btoORIGEN.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(3)
        else:
            self.dlg.btoORIGEN.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoNACIONALITAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Nacionalitat.
        '''
        if clicked:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(4)
        else:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_Tots_els_habitants(self, enabled):
        if enabled:
            self.dlg.txtEdatMax.setEnabled(False)
            self.dlg.txtEdatMin.setEnabled(False)
        else:
            self.dlg.txtEdatMax.setEnabled(True)
            self.dlg.txtEdatMin.setEnabled(True)
    
    def EstatInicial(self):
        '''
        @param self:
        Resteja tots els valors per defecte del plugin: estat inicial.
        '''
        global Versio_modul
        self.dlg.versio.setText(Versio_modul)
        self.dlg.GrupPestanyes.setCurrentIndex(0)
        self.dlg.ILLES.setChecked(True)
        self.dlg.btoEdatRestrictiu.setChecked(True)
        self.dlg.btoDataAvui.setChecked(True)
        self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dlg.data.setMaximumDate(QtCore.QDate(7999, 12, 28))
        self.dlg.data.setMaximumTime(QtCore.QTime(23, 59, 59))
        self.dlg.data.setEnabled(False)
        self.dlg.btoEDAT.setChecked(False)
        self.dlg.btoGENERE.setChecked(False)
        self.dlg.btoESTUDIS.setChecked(False)
        self.dlg.btoORIGEN.setChecked(False)
        self.dlg.btoNACIONALITAT.setChecked(False)
        self.dlg.txtEdatMin.clear()
        self.dlg.txtEdatMax.clear()
        self.dlg.txtEdatMax.setEnabled(True)
        self.dlg.txtEdatMin.setEnabled(True)
        self.dlg.lblEstatConn.setText('No connectat')
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.btoPais.setChecked(True)
        self.dlg.btoPais_3.setChecked(True)
        self.dlg.btoHome.setChecked(False)
        self.dlg.btoDona.setChecked(False)
        self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.LlistaPais.clear()
        self.dlg.LlistaPais2.clear()
        self.dlg.LlistaZonesCont.clear()
        self.dlg.LlistaZonesCont2.clear()
        self.dlg.llistaEstudis.clear()
        self.dlg.LlistaZonesCont2.setEnabled(False)
        self.dlg.LlistaZonesCont.setEnabled(False)
        self.dlg.Tots_els_habitants.toggled.connect(self.on_click_Tots_els_habitants)
        self.dlg.setEnabled(True)
    
    def on_Change_ComboConn(self):
        '''
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de les connexions,
        automàticament comprova si es pot establir
        connexió amb la bbdd seleccionada.
        '''
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global versio_db
        s = QSettings()
        select = 'Selecciona connexió'
        nom_conn=self.dlg.comboConnexions.currentText()
        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.lblEstatConn.setText('Connectant...')
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()
            
            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                self.dlg.lblEstatConn.setText('Connectat')
                cur = conn.cursor()
                self.detect_database_version(cur, conn)
            except Exception as ex:
                self.eliminaTaulesTemporals(cur, conn)
                msg_error="Error en l'establiment de la connexio amb la base de dades"
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            #Sentencia SQL Estudis
            self.dlg.llistaEstudis.clear()
            sql=f'''SELECT DISTINCT studies_code, studies
                    FROM census_{Fitxer} 
                    ORDER BY 2;'''
            self.dlg.LlistaPais.clear()
            self.dlg.LlistaPais2.clear()
            sql2 = f''' SELECT DISTINCT previous_place_code, previous_place_name 
                        FROM census_{Fitxer} 
                        WHERE origin_code != 108
                        ORDER BY 2;'''
            self.dlg.LlistaZonesCont.clear()
            self.dlg.LlistaZonesCont2.clear()
            sql3 = f''' SELECT DISTINCT continent_zone
                        FROM country_{Fitxer}
                        WHERE continent_zone IS NOT NULL
                        ORDER BY 1;'''
            sql4 = f'''
                    SELECT description
                    FROM pg_description
                    JOIN pg_class ON pg_description.objoid = pg_class.oid
                    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
                    WHERE relname = 'census_{Fitxer}' AND nspname = 'public';'''
            try:
                cur.execute(sql)
            except Exception as ex:
                self.eliminaTaulesTemporals(cur, conn)  
                msg_error="Error en la sentencia SQL següent:\n"+sql
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    desc1=row[1]
                    self.dlg.llistaEstudis.addItem(desc1)
                    self.dlg.llistaEstudis.item(index).setToolTip(str(desc))
                
                cur.execute(sql2)
            except Exception as ex:
                self.eliminaTaulesTemporals(cur, conn)
                msg_error="Error en la sentencia SQL següent:\n"+sql2
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                desc1 = Decimal(108)
                self.dlg.LlistaPais.addItem('ESPANYA')
                self.dlg.LlistaPais.item(0).setToolTip(str(desc1))
                self.dlg.LlistaPais2.addItem('ESPANYA')
                self.dlg.LlistaPais2.item(0).setToolTip(str(desc1))
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=1):
                    desc=row[0]
                    desc1=row[1]
                    self.dlg.LlistaPais.addItem(desc1)
                    self.dlg.LlistaPais.item(index).setToolTip(str(desc))
                    self.dlg.LlistaPais2.addItem(desc1)
                    self.dlg.LlistaPais2.item(index).setToolTip(str(desc))
                    
                cur.execute(sql3)
            except Exception as ex:
                self.eliminaTaulesTemporals(cur, conn)
                msg_error="Error en la sentencia SQL següent:\n"+sql3
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    self.dlg.LlistaZonesCont.addItem(desc)
                    self.dlg.LlistaZonesCont.item(index).setToolTip(desc)
                    self.dlg.LlistaZonesCont2.addItem(desc)
                    self.dlg.LlistaZonesCont2.item(index).setToolTip(desc)
                cur.execute(sql4)
            except Exception as ex:
                self.eliminaTaulesTemporals(cur, conn)
                msg_error="Error en la sentencia SQL següent:\n"+sql4
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            rows = cur.fetchall()
            if len(rows)!=0:
                self.dlg.data.setDateTime(QtCore.QDateTime.fromString(str(rows[0][0]),"d/M/yyyy"))
            else:
                self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
            conn.close()        
        else:
            self.dlg.lblEstatConn.setText('No connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
    
    def detect_database_version(self, cur, conn):
        global versio_db
        cur.execute("""
                    SELECT taula
                    FROM config
                    WHERE variable = 'versio';
                    """)
        versio_db = cur.fetchone()[0]
        print(versio_db)
        if versio_db == '1.0':
            cur.execute(f"""
                        DROP TABLE IF EXISTS census_{Fitxer};
                        CREATE TABLE census_{Fitxer} (
                            cadastral_reference,
                            cadastral_zoning_reference,
                            studies_code,
                            studies,
                            previous_place_code,
                            origin_code,
                            date_of_birth,
                            sex,
                            nation_code,
                            designator,
                            id,
                            previous_place_name
                        ) AS SELECT "REFCAD", "D_S_I", "HABNIVINS", "NINDESCRI", "HABCOMUNA", "HABCOPANA", "HABFECNAC", "HABELSEXO", "HABNACION", "CarrerNumBis", "id", "HABNOMUNA" FROM "Padro";
                        """)
            conn.commit()
            print(f"Versió de la base de dades: 1.0, executant create table census_{Fitxer}")

            cur.execute(f"""
                        DROP TABLE IF EXISTS country_{Fitxer};
                        CREATE TABLE country_{Fitxer} (
                            continent_zone,
                            country_code,
                            ue27
                        ) AS SELECT "CONZONCON", "CONCODPAI", "UE27" FROM "CONTINENTS";
                        """)
            
            conn.commit()
            print(f"Versió de la base de dades: 1.0, executant create table country_{Fitxer}")
        else:
            cur.execute(f"""CREATE TABLE census_{Fitxer} AS SELECT * FROM census;""")
            conn.commit()
            print(f"Versió de la base de dades: 2.0, executant create table census_{Fitxer}")
            cur.execute(f"""CREATE TABLE country_{Fitxer} AS SELECT * FROM country;""")
            conn.commit()
            print(f"Versió de la base de dades: 2.0, executant create table country_{Fitxer}")
    
    def tornaConnectat(self):
        '''
        Posa a l'etiqueta que indica les connexions
        '''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
        
    def setProcessant(self):
        '''
        Posa a l'etiqueta que indica les connexions
        '''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 125, 155)')
        self.dlg.lblEstatConn.setText("Processant...")
        QApplication.processEvents()
        
    
    def on_click_btoData(self, enabled):
        '''
        Activa o descativa el calendari per escollir una data.
        '''
        if enabled:
            self.dlg.data.setEnabled(True)
        else:
            self.dlg.data.setEnabled(False)      

    def on_click_crearTaula(self):
        '''
        Funcio principal:
        Funcio creadora de les taules.
        1. Es connecta amb la BDD escollida
        2. Inicialitza variables per crear les instruccions SQL
        3. Transforma les instruccions donades per l'usuari en sentencies SQl.
        4. Tria quin dels metodes de treball s'utilitza i executa les sentencies.
        5. Graba el resultat a la BDD
        6. Treu un missatge on comptabilitza el nombre d'habitants que formen les taules.
        '''        
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        s = QSettings()
        
        
        self.dlg.setEnabled(False)
        self.setProcessant()
        '''Control d'errors'''
        if ((not self.dlg.btoEDAT.isChecked()) and (not self.dlg.btoGENERE.isChecked()) and (not self.dlg.btoESTUDIS.isChecked()) and (not self.dlg.btoORIGEN.isChecked()) and (not self.dlg.btoNACIONALITAT.isChecked())):
                QMessageBox.information(None, "Error 1", "No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
                self.dlg.setEnabled(True)
                self.tornaConnectat()
                #print ("No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
        else:
            nom_conn=self.dlg.comboConnexions.currentText()
            select = 'Selecciona connexió'
            if (nom_conn != select):
                #fileName = QtGui.QFileDialog.getSaveFileName(self.dlg, "Guardar com...", "c:/", "CSV files (*.csv)")
                ##startingDir = cmds.workspace(q=True, rootDirectory=True)
                '''Eleccio del cami de destí dels arxius'''
                fileName= QFileDialog.getExistingDirectory(self.dlg,"Open a folder","c:/",QFileDialog.ShowDirsOnly)
                if fileName != '':                             
                    s.beginGroup("PostgreSQL/connections/"+nom_conn)
                    currentKeys = s.childKeys()
                    '''Connexio'''
                    nomBD1 = s.value("database", "" )
                    contra1 = s.value("password", "" )
                    host1 = s.value("host", "" )
                    port1 = s.value("port", "" )
                    usuari1 = s.value("username", "" )
                    
                    self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
                    self.dlg.lblEstatConn.setText('Connectant...')
                    self.dlg.lblEstatConn.setAutoFillBackground(True)
                    QApplication.processEvents()
                    
                    #Sentencia SQL Estudis
                    where = 'where '      
                    
                    #Connexio
                    nomBD = nomBD1.encode('ascii','ignore')
                    usuari = usuari1.encode('ascii','ignore')
                    servidor = host1.encode('ascii','ignore')     
                    contrasenya = contra1.encode('ascii','ignore')
                    try:
                        estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                        conn = psycopg2.connect(estructura)
                        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 170, 142)')
                        self.dlg.lblEstatConn.setText('Connectat i processant')
                        QApplication.processEvents()
                        cur = conn.cursor()
                        self.eliminaTaulesTemporals(cur, conn) # per si ja existeixen, per a que un usuari sense permisos d'administrador pugui executar el plugin sense errors
                        self.detect_database_version(cur, conn)
                        
                        '''Composicio del where'''
                        '''Filtre d'edat'''
                        if self.dlg.btoEDAT.isChecked():
                            max = 0
                            min = 0
                            try:
                                if self.dlg.Tots_els_habitants.isChecked():
                                    max = 1000
                                else:
                                    max = int(self.dlg.txtEdatMax.text())
                                    min = int(self.dlg.txtEdatMin.text())
                                
                            except Exception as ex:
                                self.eliminaTaulesTemporals(cur, conn)
                                print("Error al llegir les edats.\nEls camps edat mínima i edat màxima han d'estar plens")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                QMessageBox.information(None, "Error", u"Error al llegir les edats.\nEls camps edat mínima i edat màxima han d'estar plens")
                                self.dlg.GrupPestanyes.setCurrentIndex(0)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                return
                            
                            if ((min > max) or (min < 0) or (max <= 0)):
                                QMessageBox.information(None, "Error", u"Error:\n minim > màxim o número/s negatiu/s")
                                self.dlg.GrupPestanyes.setCurrentIndex(0)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                return
                            hora = self.dlg.data.date()
                            horaAct = QtCore.QDateTime.currentDateTime()
                            diaActual = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year())
                            
                            if self.dlg.btoEdatRestrictiu.isChecked():
                                if self.dlg.btoData.isChecked():
                                    diaTriatMin = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - min)
                                    diaTriatMax = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - max)
                                    where += 'date_of_birth >= to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND date_of_birth <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                                    
                                elif self.dlg.btoDataAvui.isChecked():
                                    diaTriatMin = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - min)
                                    diaTriatMax = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - max)
                                    where += 'date_of_birth >= to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND date_of_birth <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                            elif self.dlg.btoEdatAmpli.isChecked():
                                if self.dlg.btoData.isChecked():
                                    diaTriatMin = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - min)
                                    diaTriatMax = str(hora.day()) + "-" + str(hora.month()) + "-" + str(hora.year() - (max+1))
                                    where += 'date_of_birth > to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND date_of_birth <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')'"
                                    
                                elif self.dlg.btoDataAvui.isChecked():
                                    diaTriatMin = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - min)
                                    diaTriatMax = str(horaAct.date().day()) + "-" + str(horaAct.date().month()) + "-" + str(horaAct.date().year() - (max+1))
                                    where += '"HABFECNAC" > to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND "HABFECNAC" <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                                    where += 'date_of_birth > to_date(' + "'" + diaTriatMax + "'," + "'DD-MM-YYYY')" + ' AND date_of_birth <= to_date(' + "'" + diaTriatMin + "'," + "'DD-MM-YYYY')"
                        
                        '''Filtre de genere'''    
                        if self.dlg.btoGENERE.isChecked():
                            if self.dlg.btoEDAT.isChecked():
                                where += ' AND '
                            if self.dlg.btoHome.isChecked():
                                where += 'sex = 1'
                            elif self.dlg.btoDona.isChecked():
                                where += 'sex = 6'
                            else:
                                QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap gènere seleccionat.")
                                self.dlg.GrupPestanyes.setCurrentIndex(1)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                return
    
                        '''Filtre d'estudis'''
                        if self.dlg.btoESTUDIS.isChecked():
                            if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked():
                                where += ' AND '
                            llistaEST = self.dlg.llistaEstudis.selectedItems()
                            if len(llistaEST)>0:
                                for item in llistaEST:
                                    where += 'studies_code = '+ item.toolTip() + ' OR '
                                where=where[0:len(where)-4]
                            else:
                                QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap estudi seleccionat.")
                                self.dlg.GrupPestanyes.setCurrentIndex(2)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                return
                        
                        '''Filtre d'origen'''
                        if self.dlg.btoORIGEN.isChecked():
                            if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked() or self.dlg.btoESTUDIS.isChecked():
                                where += ' AND '
                            if self.dlg.btoPais.isChecked():
                                llistaORG = self.dlg.LlistaPais.selectedItems()
                                if len(llistaORG)>0:
                                    for item in llistaORG:
                                        if item.toolTip() != '108':
                                            where += 'previous_place_code = '+ item.toolTip().replace("\'","''") + ' AND "origin_code" != 108' + ' OR '
                                        else:
                                            where += 'origin_code = 108' + ' OR '
                                    where=where[0:len(where)-4]
                                else:
                                    QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap país seleccionat.")
                                    self.dlg.GrupPestanyes.setCurrentIndex(3)
                                    self.tornaConnectat()
                                    self.dlg.setEnabled(True)
                                    return 
                            elif self.dlg.btoZones.isChecked():
                                llistaORG = self.dlg.LlistaZonesCont.selectedItems()
                                if len(llistaORG)>0:
                                    zonaCont = 'WHERE '
                                    for item in llistaORG:
                                        zonaCont += 'continent_zone = '  + chr(39) + item.toolTip().replace("\'","''")  + chr(39) + ' OR '

                                    zonaCont=zonaCont[0:len(zonaCont)-4]
                                    SQL_Pro = f'SELECT country_code FROM country_{Fitxer} ' + zonaCont + ' ORDER BY 1'                                    
                                    
                                    try:
                                        cur.execute(SQL_Pro)
                                        rows = cur.fetchall()
                                    except Exception as ex:
                                        self.eliminaTaulesTemporals(cur, conn)
                                        print("Error SELECT country_code")
                                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                        message = template.format(type(ex).__name__, ex.args)
                                        print (message)
                                        self.tornaConnectat()
                                        QMessageBox.information(None, "Error", "Error SELECT country_code")
                                        self.dlg.setEnabled(True)
                
                                    where += '('
                                    for index,row in enumerate(rows,start=0):
                                        if index == 0:
                                            if row[0] != 108:
                                                where += '(previous_place_code = ' + str(row[0]) + ' AND origin_code != 108)'
                                            else:
                                                where += '(origin_code = 108)'
                                        else:
                                            if row[0] != 108:
                                                where += ' OR (previous_place_code = ' + str(row[0]) + ' AND origin_code != 108)'
                                            else:
                                                where += ' OR (origin_code = 108)'
                                    where += ')'
                                else:
                                    QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap zona continental seleccionada.")
                                    self.dlg.GrupPestanyes.setCurrentIndex(3)
                                    self.tornaConnectat()
                                    self.dlg.setEnabled(True)
                                    return
                            elif self.dlg.btoEuropa27.isChecked():
                                SQL_Pro = f'''   SELECT country_code 
                                                FROM country_{Fitxer}
                                                WHERE ue27 = 1 
                                                ORDER BY 1'''
                                try:
                                    cur.execute(SQL_Pro)
                                    rows = cur.fetchall()
                                except Exception as ex:
                                    self.eliminaTaulesTemporals(cur, conn)
                                    print("Error SELECT country_code.")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    self.tornaConnectat()
                                    QMessageBox.information(None, "Error", "Error SELECT country_code.")
                                    self.dlg.setEnabled(True)
                                where += '('
                                for index,row in enumerate(rows,start=0):
                                    if index == 0:
                                        if row[0] != 108:
                                            where += '(previous_place_code = ' + str(row[0]) + ' AND origin_code != 108)'
                                        else:
                                            where += '(origin_code = 108)'
                                    else:
                                        if row[0] != 108:
                                            where += ' OR (previous_place_code= ' + str(row[0]) + ' AND origin_code != 108)'
                                        else:
                                            where += ' OR (origin_code = 108)'
                                where += ')'
                        
                        '''Filtre de nacionalitat'''
                        if self.dlg.btoNACIONALITAT.isChecked():
                            if self.dlg.btoEDAT.isChecked() or self.dlg.btoGENERE.isChecked() or self.dlg.btoESTUDIS.isChecked() or self.dlg.btoORIGEN.isChecked():
                                where += ' AND '
                            if self.dlg.btoPais_3.isChecked():
                                llistaORG = self.dlg.LlistaPais2.selectedItems()
                                if len(llistaORG)>0:
                                    for item in llistaORG:
                                        where += 'nation_code = '+ item.toolTip() + ' OR '
                                    where=where[0:len(where)-4]
                                else:
                                    QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap país seleccionat.")
                                    self.dlg.GrupPestanyes.setCurrentIndex(4)
                                    self.tornaConnectat()
                                    self.dlg.setEnabled(True)
                                    return 
                            elif self.dlg.btoZones_3.isChecked():
                                llistaORG = self.dlg.LlistaZonesCont2.selectedItems()
                                if len(llistaORG)>0:                               
                                    zonaCont = 'WHERE '
                                    for item in llistaORG:
                                        zonaCont += 'continent_zone = '  + chr(39) + item.toolTip().replace("\'","''")  + chr(39) + ' OR '

                                    zonaCont=zonaCont[0:len(zonaCont)-4]
                                    SQL_Pro = f'SELECT country_code from country_{Fitxer} '  + zonaCont  + ' ORDER BY 1' 
                                    try:
                                        cur.execute(SQL_Pro)
                                        rows = cur.fetchall()
                                    except Exception as ex:
                                        self.eliminaTaulesTemporals(cur, conn)
                                        print("Error SELECT country_code.")
                                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                        message = template.format(type(ex).__name__, ex.args)
                                        print (message)
                                        self.tornaConnectat()
                                        QMessageBox.information(None, "Error", "Error SELECT country_code.")
                                        self.dlg.setEnabled(True)
                                    where += '('
                                    for index,row in enumerate(rows,start=0):
                                        if index == 0:
                                            where += 'nation_code = ' + str(row[0])
                                        else:
                                            where += ' OR nation_code = ' + str(row[0])
                                    where += ')'
                                else:
                                    QMessageBox.information(None, "Error", u"Error:\nNo hi ha cap zona continental seleccionada.")
                                    self.dlg.GrupPestanyes.setCurrentIndex(4)
                                    self.tornaConnectat()
                                    self.dlg.setEnabled(True)
                                    return
                            elif self.dlg.btoEuropa27_3.isChecked():
                                SQL_Pro = f'SELECT country_code from country_{Fitxer} WHERE ue27 = 1 ORDER BY 1'
                                try:
                                    cur.execute(SQL_Pro)
                                    rows = cur.fetchall()
                                except Exception as ex:
                                    self.eliminaTaulesTemporals(cur, conn)
                                    print("Error SELECT country_code.")
                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    message = template.format(type(ex).__name__, ex.args)
                                    print (message)
                                    self.tornaConnectat()
                                    QMessageBox.information(None, "Error", "Error SELECt country_code.")
                                    self.dlg.setEnabled(True)
                                where += '('
                                for index,row in enumerate(rows,start=0):
                                    if index == 0:
                                        where += 'nation_code = ' + str(row[0])
                                    else:
                                        where += ' OR nation_code = ' + str(row[0])
                                where += ')'
                        
                        where += "\n"
                        
                        '''Execució de la sentencia SQL'''
                        '''Per ILLES'''
                        if self.dlg.ILLES.isChecked() or self.dlg.TOTS.isChecked():
                            #dl = 'delete from "public"."Resum2";' 
                            #ins = 'insert into  "public"."Resum2"\n'
                            sql = f'''
                            SELECT ROW_NUMBER() OVER () AS id, "cadastral_zoning_reference" AS ILLES_Codificades, COUNT(*) AS Habitants
                            FROM census_{Fitxer}\n'''
                            sql_gb = 'GROUP BY cadastral_zoning_reference\nORDER BY 2'
                            #sum = 'select sum("Habitants") from Resum_Tmp;'
                            csv = sql + where + sql_gb
                            try:
                                hab_illes = 0
                                cur.execute(csv)
                                resultat = cur.fetchall()
                                if versio_db == '1.0':
                                    arxiu = open(fileName+ "/tr_illes_v1.csv", 'w')
                                else:
                                    arxiu = open(fileName+ "/tr_illes_v2.csv", 'w')
                                arxiu.write("ILLES_Codificades;Habitants\n")
                                for x in range(0, len(resultat)):
                                    arxiu.write(str(resultat[x][1]) +  ";" + str(resultat[x][2]) + "\n")
                                    hab_illes += resultat[x][2]
                                arxiu.close()
                                if self.dlg.TOTS.isChecked() != True:
                                    QMessageBox.information(None, "Resultat", u"Taula resum creada amb " + str(hab_illes) + ' habitants')
                                    self.eliminaTaulesTemporals(cur, conn)
                            except Exception as ex:
                                self.eliminaTaulesTemporals(cur, conn)
                                print("No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                QMessageBox.information(None, "Error", u"No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                        '''Per Parcel.les'''
                        if self.dlg.PARCELES.isChecked() or self.dlg.TOTS.isChecked():
                            #dl = 'delete from "public"."ResumParcela2"'
                            #ins = 'insert into  "public"."ResumParcela2"\n'
                            sql = 'select row_number() OVER () AS id, "REFCAD" as Parcela, count(*) as Habitants from "public"."Padro"\n'
                            sql = f'''
                            SELECT ROW_NUMBER() OVER () AS id, cadastral_reference AS Parcela, COUNT(*) AS Habitants
                            FROM census_{Fitxer}\n'''
                            sql_gb = 'GROUP BY cadastral_reference\nORDER BY 2'
                            #sum = 'select sum("Habitants") from "public"."ResumParcela2"'
                            try:
                                hab_parce = 0
                                csv = sql + where + sql_gb
                                cur.execute(csv)
                                resultat = cur.fetchall()
                                if versio_db == '1.0':
                                    arxiu = open(fileName+ "/tr_parceles_v1.csv", 'w')
                                else:
                                    arxiu = open(fileName+ "/tr_parceles_v2.csv", 'w')
                                arxiu.write("Parcela;Habitants\n")
                                for x in range(0, len(resultat)):
                                    arxiu.write(str(resultat[x][1]) +  ";" + str(resultat[x][2]) + "\n")
                                    hab_parce += resultat[x][2]
                                arxiu.close()
                                if self.dlg.TOTS.isChecked() != True:
                                    QMessageBox.information(None, "Resultat", u"Taula resum creada amb " + str(hab_parce) + ' habitants')
                                    self.eliminaTaulesTemporals(cur, conn)
                            except Exception as ex:
                                self.eliminaTaulesTemporals(cur, conn)
                                print("No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                QMessageBox.information(None, "Error", u"No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                        '''Per portals'''
                        if self.dlg.PORTALS.isChecked() or self.dlg.TOTS.isChecked():
                            #dl = 'delete from "public"."ResumNPolicia2"'
                            #ins = 'insert into  "public"."ResumNPolicia2"\n'
                            sql = 'select row_number() OVER () AS id, "CarrerNumBis" as NPolicia, count(*) as Habitants from "public"."Padro"\n'
                            sql = f'''
                            SELECT ROW_NUMBER() OVER () AS id, designator AS NPolicia, COUNT(*) AS Habitants
                            FROM census_{Fitxer}\n
                            '''
                            sql_gb = 'GROUP BY designator\nORDER BY 2'
                            #sum = 'select sum("Habitants") from "public"."ResumNPolicia2"'
                            try:
                                hab_npol = 0
                                csv = sql + where + sql_gb
                                cur.execute(csv)
                                resultat = cur.fetchall()
                                if versio_db == '1.0':
                                    arxiu = open(fileName+ "/tr_npolicia_v1.csv", 'w')
                                else:
                                    arxiu = open(fileName+ "/tr_npolicia_v2.csv", 'w')
                                arxiu.write("NPolicia;Habitants\n")
                                for x in range(0, len(resultat)):
                                    arxiu.write(str(resultat[x][1]) +  ";" + str(resultat[x][2]) + "\n")
                                    hab_npol += resultat[x][2]
                                arxiu.close()
                                if self.dlg.TOTS.isChecked() != True:
                                    QMessageBox.information(None, "Resultat", u"Taula resum creada amb " + str(hab_npol) + ' habitants')
                                    self.eliminaTaulesTemporals(cur, conn)
                                else:
                                    QMessageBox.information(None, "Resultat", u"Taula resum d'illes creada amb " + str(hab_illes) + ' habitants\n'
                                                            + u"Taula resum de parceles creada amb " + str(hab_parce) + ' habitants\n'
                                                            + u"Taula resum de números de policia creada amb " + str(hab_npol) + ' habitants\n')
                                    self.eliminaTaulesTemporals(cur, conn)
                            except Exception as ex:
                                self.eliminaTaulesTemporals(cur, conn)
                                print("No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                self.tornaConnectat()
                                self.dlg.setEnabled(True)
                                QMessageBox.information(None, "Error", u"No s'ha pogut modificar la TaulaResum de la base de dades.\nComprova els privilegis que tens.")
                        self.tornaConnectat()
                        self.dlg.setEnabled(True)
                        self.eliminaTaulesTemporals(cur, conn)
                        conn.close()
                        
                    except Exception as ex:
                        self.eliminaTaulesTemporals(cur, conn)
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                        self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                        self.dlg.setEnabled(True)
                        #print ("I am unable to connect to the database")
                else:
                    QMessageBox.information(None, "Error", 'No hi ha un destí fitxat pel/s fitxer/s.\nTorneu a crear la taula i doneu un camí vàlid.')
                    self.tornaConnectat()
                    self.eliminaTaulesTemporals(cur, conn)
                    self.dlg.setEnabled(True)
            else:
                QMessageBox.information(None, "Error", 'No hi ha cap connexió seleccionada.\nSeleccioneu una connexió.')
                self.tornaConnectat()
                self.dlg.setEnabled(True)
                #print ("No hi ha cap filtre seleccionat.\nSeleccioneu un filtre.")
    
    def populateComboBox(self,combo,list,predef,sort):
        '''
        procedure to fill specified combobox with provided list
        '''
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
    
    def getConnections(self):
        '''
        Aquesta funcio retorna les connexions que estan guardades en el projecte.
        '''
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/TaulaResum/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('TaulaResum'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)
        # remove the toolbar
        #del self.toolbar


    def run(self):
        global Fitxer
        '''
        Run method that performs all the real work
        '''
        conn=self.getConnections()
        self.EstatInicial()
        # show the dialog
        self.dlg.show()
        
        self.populateComboBox(self.dlg.comboConnexions ,conn,'Selecciona connexió',True)
        Fitxer=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def eliminaTaulesTemporals(self,cur, conn):
        try:
            cur.execute(f"DROP TABLE IF EXISTS census_{Fitxer}")
            conn.commit()
            cur.execute(f"DROP TABLE IF EXISTS country_{Fitxer}") 
            conn.commit()
        except Exception as ex:
            print("Error DROP final")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP final")
            conn.rollback()
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            self.dlg.setEnabled(True)
            self.dlg.setEnabled(True)
