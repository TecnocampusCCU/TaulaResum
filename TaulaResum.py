"""
/***************************************************************************
 TaulaResum
                                 A QGIS plugin
 TaulaResum
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-13
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Josep Lopez Xarbau / CCU
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .TaulaResum_dialog import TaulaResumDialog
import os.path
"""
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtSql import *
from PyQt5.QtWidgets import QAction,QMessageBox,QTableWidgetItem, QApplication, QFileDialog,QToolBar

#from qgis.core import QgsDataSourceURI
from qgis.utils import iface
import psycopg2
from decimal import *
import unicodedata

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .TaulaResum_dialog import TaulaResumDialog
import os.path

"""
Variables globals per a la connexio
"""
nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
micolor=None
Versio_modul="V_Q3.240228"

versio_db=None
OLD = 0
REFACTORED = 1


'''
Classe principal 'Taula Resum'
'''
class TaulaResum:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        '''
        Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        '''
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TaulaResum_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        '''
        Connexio dels botons amb les funcions que han de realitzar
        '''
        self.dlg = TaulaResumDialog()
        self.dlg.btoSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.btoHome.toggled.connect(self.on_click_MarcarBotoHome)
        self.dlg.btoDona.toggled.connect(self.on_click_MarcarBotoDona)
        self.dlg.btoEDAT.toggled.connect(self.on_click_MarcarBotoEDAT)
        self.dlg.btoGENERE.toggled.connect(self.on_click_MarcarBotoGENERE)
        self.dlg.btoESTUDIS.toggled.connect(self.on_click_MarcarBotoESTUDIS)
        self.dlg.btoORIGEN.toggled.connect(self.on_click_MarcarBotoORIGEN)
        self.dlg.btoNACIONALITAT.toggled.connect(self.on_click_MarcarBotoNACIONALITAT)
        self.dlg.comboConnexions.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.btoData.toggled.connect(self.on_click_btoData)
        self.dlg.btoPais.toggled.connect(self.on_click_btoPais)
        self.dlg.btoPais_3.toggled.connect(self.on_click_btoPais2)
        self.dlg.btoZones.toggled.connect(self.on_click_btoZones)
        self.dlg.btoZones_3.toggled.connect(self.on_click_btoZones2)
        self.dlg.btoCrearTaula.clicked.connect(self.on_click_crearTaula)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&CCU')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar('CCU')
        #self.toolbar.setObjectName('TaulaResum')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TaulaResum', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def on_click_btoPais(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaPais.setEnabled(True)
        else:
            self.dlg.LlistaPais.setEnabled(False)
            
    def on_click_btoPais2(self,enabled):
        '''
        Activa o desactiva la llista de paisos
        a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaPais2.setEnabled(True)
        else:
            self.dlg.LlistaPais2.setEnabled(False)
            
    def on_click_btoZones(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya origen.
        '''
        if enabled:
            self.dlg.LlistaZonesCont.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont.setEnabled(False)
            
    def on_click_btoZones2(self,enabled):
        '''
        Activa o desactiva la llista de zones
        continentals a la pestanya nacionalitat.
        '''
        if enabled:
            self.dlg.LlistaZonesCont2.setEnabled(True)
        else:
            self.dlg.LlistaZonesCont2.setEnabled(False)
                  
    
    def on_click_Sortir(self):
        '''/
        Tanca la finestra del plugin 
        '''
        self.EstatInicial()
        self.dlg.close()
        
    def on_click_MarcarBotoHome(self, clicked):
        '''
        Activa o desactiva el boto Home
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoHome.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoDona.setChecked(False)
        else:
            self.dlg.btoHome.setChecked(False)
            self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoDona(self, clicked):
        '''
        Activa o desactiva el boto Dona
        a la pestanta Genere.
        '''
        if clicked:
            self.dlg.btoDona.setStyleSheet('background-color: #7fff7f')
            self.dlg.btoHome.setChecked(False)
        else:
            self.dlg.btoDona.setChecked(False)
            self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoEDAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Edat.
        '''
        if clicked:
            self.dlg.btoEDAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(0)
        else:
            self.dlg.btoEDAT.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoGENERE(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Genere.
        '''
        if clicked:
            self.dlg.btoGENERE.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(1)
        else:
            self.dlg.btoGENERE.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoESTUDIS(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Estudis.
        '''
        if clicked:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(2)
        else:
            self.dlg.btoESTUDIS.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarBotoORIGEN(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        d'Origen.
        '''
        if clicked:
            self.dlg.btoORIGEN.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(3)
        else:
            self.dlg.btoORIGEN.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_MarcarBotoNACIONALITAT(self, clicked):
        '''
        Activa o desactiva el boto de filtre
        de Nacionalitat.
        '''
        if clicked:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: #7fff7f')
            self.dlg.GrupPestanyes.setCurrentIndex(4)
        else:
            self.dlg.btoNACIONALITAT.setStyleSheet('background-color: rgb(227, 227, 227)')
    
    def on_click_Tots_els_habitants(self, enabled):
        if enabled:
            self.dlg.grupMarge.setEnabled(False)
        else:
            self.dlg.grupMarge.setEnabled(True)
    
    def EstatInicial(self):
        '''
        @param self:
        Resteja tots els valors per defecte del plugin: estat inicial.
        '''
        global Versio_modul
        self.dlg.versio.setText(Versio_modul)
        self.dlg.GrupPestanyes.setCurrentIndex(0)
        self.dlg.ILLES.setChecked(True)
        self.dlg.btoEdatRestrictiu.setChecked(True)
        self.dlg.btoDataAvui.setChecked(True)
        self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dlg.data.setMaximumDate(QtCore.QDate(7999, 12, 28))
        self.dlg.data.setMaximumTime(QtCore.QTime(23, 59, 59))
        self.dlg.data.setEnabled(False)
        self.dlg.btoEDAT.setChecked(False)
        self.dlg.btoGENERE.setChecked(False)
        self.dlg.btoESTUDIS.setChecked(False)
        self.dlg.btoORIGEN.setChecked(False)
        self.dlg.btoNACIONALITAT.setChecked(False)
        self.dlg.txtEdatMin.clear()
        self.dlg.txtEdatMax.clear()
        self.dlg.txtEdatMax.setEnabled(True)
        self.dlg.txtEdatMin.setEnabled(True)
        self.dlg.lblEstatConn.setText('No connectat')
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.btoPais.setChecked(True)
        self.dlg.btoPais_3.setChecked(True)
        self.dlg.btoHome.setChecked(False)
        self.dlg.btoDona.setChecked(False)
        self.dlg.btoHome.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.btoDona.setStyleSheet('background-color: rgb(227, 227, 227)')
        self.dlg.LlistaPais.clear()
        self.dlg.LlistaPais2.clear()
        self.dlg.LlistaZonesCont.clear()
        self.dlg.LlistaZonesCont2.clear()
        self.dlg.llistaEstudis.clear()
        self.dlg.LlistaZonesCont2.setEnabled(False)
        self.dlg.LlistaZonesCont.setEnabled(False)
        self.dlg.Tots_els_habitants.toggled.connect(self.on_click_Tots_els_habitants)
        self.dlg.setEnabled(True)
    
    def on_Change_ComboConn(self):
        '''
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de les connexions,
        automàticament comprova si es pot establir
        connexió amb la bbdd seleccionada.
        '''
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global versio_db
        s = QSettings()
        select = 'Selecciona connexió'
        nom_conn=self.dlg.comboConnexions.currentText()
        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.lblEstatConn.setText('Connectant...')
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()
            
            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                self.dlg.lblEstatConn.setText('Connectat')
                cur = conn.cursor()
                self.detect_database_version(cur)
            except Exception as ex:
                msg_error="Error en l'establiment de la connexio amb la base de dades"
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            if versio_db == OLD:
                #Sentencia SQL Estudis
                self.dlg.llistaEstudis.clear()
                sql='select distinct("HABNIVINS"),"NINDESCRI" from "public"."Padro" order by 2;';
                self.dlg.LlistaPais.clear()
                self.dlg.LlistaPais2.clear()
                sql2 = 'select distinct("HABCOMUNA"), "HABNOMUNA" FROM "public"."Padro" where "HABCOPANA" != 108 ORDER BY 2'
                self.dlg.LlistaZonesCont.clear()
                self.dlg.LlistaZonesCont2.clear()
                sql3 = 'select distinct("CONZONCON") FROM "public"."CONTINENTS" WHERE "CONZONCON" IS NOT NULL ORDER BY 1'
                sql4 = 'select description from pg_description join pg_class on pg_description.objoid = pg_class.oid join pg_namespace on pg_class.relnamespace = pg_namespace.oid where relname = \'Padro\' and nspname=\'public\''
            if versio_db == REFACTORED:
                #Sentencia SQL Estudis
                self.dlg.llistaEstudis.clear()
                sql=''' SELECT DISTINCT studies_code, studies
                        FROM census 
                        ORDER BY 2;'''
                self.dlg.LlistaPais.clear()
                self.dlg.LlistaPais2.clear()
                sql2 = '''  SELECT DISTINCT previous_place_code, previous_place_name 
                            FROM census 
                            WHERE origin_code != 108
                            ORDER BY 2;'''
                self.dlg.LlistaZonesCont.clear()
                self.dlg.LlistaZonesCont2.clear()
                sql3 = '''  SELECT DISTINCT continent_zone
                            FROM country
                            WHERE continent_zone IS NOT NULL
                            ORDER BY 1;'''
                sql4 = '''
                        SELECT description
                        FROM pg_description
                        JOIN pg_class ON pg_description.objoid = pg_class.oid
                        JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
                        WHERE relname = 'census' AND nspname = 'public';'''
            try:
                cur.execute(sql)
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    desc1=row[1]
                    self.dlg.llistaEstudis.addItem(desc1)
                    self.dlg.llistaEstudis.item(index).setToolTip(str(desc))
                
                cur.execute(sql2)
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql2
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                desc1 = Decimal(108)
                self.dlg.LlistaPais.addItem('ESPANYA')
                self.dlg.LlistaPais.item(0).setToolTip(str(desc1))
                self.dlg.LlistaPais2.addItem('ESPANYA')
                self.dlg.LlistaPais2.item(0).setToolTip(str(desc1))
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=1):
                    desc=row[0]
                    desc1=row[1]
                    self.dlg.LlistaPais.addItem(desc1)
                    self.dlg.LlistaPais.item(index).setToolTip(str(desc))
                    self.dlg.LlistaPais2.addItem(desc1)
                    self.dlg.LlistaPais2.item(index).setToolTip(str(desc))
                    
                cur.execute(sql3)
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql3
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            try:
                rows = cur.fetchall()
                for index,row in enumerate(rows,start=0):
                    desc=row[0]
                    self.dlg.LlistaZonesCont.addItem(desc)
                    self.dlg.LlistaZonesCont.item(index).setToolTip(desc)
                    self.dlg.LlistaZonesCont2.addItem(desc)
                    self.dlg.LlistaZonesCont2.item(index).setToolTip(desc)
                cur.execute(sql4)
            except Exception as ex:
                msg_error="Error en la sentencia SQL següent:\n"+sql4
                print(msg_error)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", msg_error)
            rows = cur.fetchall()
            if len(rows)!=0:
                self.dlg.data.setDateTime(QtCore.QDateTime.fromString(str(rows[0][0]),"d/M/yyyy"))
            else:
                self.dlg.data.setDateTime(QtCore.QDateTime.currentDateTime())
            conn.close()        
        else:
            self.dlg.lblEstatConn.setText('No connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
    
    def detect_database_version(self, cur):
        global versio_db
        cur.execute("""
                    SELECT table_name
                    FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_type = 'BASE TABLE';
                    """)
        table_names = [row[0] for row in cur.fetchall()]

        if 'census' in table_names:
            versio_db = REFACTORED
        else:
            versio_db = OLD
    
    def tornaConnectat(self):
        '''
        Posa a l'etiqueta que indica les connexions
        '''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
        
    def setProcessant(self):
        '''
        Posa a l'etiqueta que indica les connexions
        '''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 125, 155)')
        self.dlg.lblEstatConn.setText("Processant...")
        QApplication.processEvents()
        
    
    def on_click_btoData(self, enabled):
        '''
        Activa o descativa el calendari per escollir una data.
        '''
        if enabled:
            self.dlg.data.setEnabled(True)
        else:
            self.dlg.data.setEnabled(False)      

    def on_click_crearTaula(self):
        global versio_db
        if versio_db == OLD:
            from TaulaResumOld import TaulaResumOld 
            TaulaResum = TaulaResumOld()
            TaulaResum.crearTaula()
        elif versio_db == REFACTORED:
            from TaulaResumRefactored import TaulaResumRefactored
            TaulaResum = TaulaResumRefactored()
            TaulaResum.crearTaula()
             
    
    def populateComboBox(self,combo,list,predef,sort):
        '''
        procedure to fill specified combobox with provided list
        '''
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
    
    def getConnections(self):
        '''
        Aquesta funcio retorna les connexions que estan guardades en el projecte.
        '''
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/TaulaResum/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('TaulaResum'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)
        # remove the toolbar
        #del self.toolbar


    def run(self):
        '''
        Run method that performs all the real work
        '''
        conn=self.getConnections()
        self.EstatInicial()
        # show the dialog
        self.dlg.show()
        
        self.populateComboBox(self.dlg.comboConnexions ,conn,'Selecciona connexió',True)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
